{"version":3,"file":"static/js/89.b41a5261.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/errorBoundary/ErrorBoundary.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hook.js"],"sourcesContent":["import img from './error.gif';\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style ={{ display: 'block', width: \"250px\", height: \"250px\", objectFit: 'contain', margin: \"0 auto\"}} src={img} alt=\"Error\"/>    \r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { useState, useEffect } from 'react';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './randomChar.min.css';\nimport mjolnir from '../../resources/img/mjolnir.png';\n\n\nconst RandomChar = () => {  \n    \n    const [char, setChar] = useState({});\n    const {loading, error, getCharacter, clearError} = useMarvelService();\n\n    useEffect(() => {\n        updateChar();\n    }, [])\n   \n  \n    const onCharLoaded = (char) => {\n        setChar(char);\n    }\n  \n    const updateChar = () => {\n        clearError();\n        const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n        getCharacter(id)\n            .then(onCharLoaded);\n    }\n     \n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"randomchar\">\n            {errorMessage}\n            {spinner}\n            {content}\n            <div className=\"randomchar__static\">\n                <p className=\"randomchar__title\">\n                    Random character for today!<br/>\n                    Do you want to get to know him better?\n                </p>\n                <p className=\"randomchar__title\">\n                    Or choose another one\n                </p>\n                <button onClick={updateChar} className=\"button button__main\">\n                    <div className=\"inner\">try it</div>\n                </button>\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\n            </div>\n        </div>\n    )\n    \n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki} = char;\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <div className=\"randomchar__block\">\n            <img src={thumbnail} alt=\"Random character\" className=\"randomchar__img\" style={imgStyle}/>\n            <div className=\"randomchar__info\">\n                <p className=\"randomchar__name\">{name}</p>\n                <p className=\"randomchar__descr\">\n                    {description}\n                </p>\n                <div className=\"randomchar__btns\">\n                    <a href={homepage} className=\"button button__main\">\n                        <div className=\"inner\">homepage</div>\n                    </a>\n                    <a href={wiki} className=\"button button__secondary\">\n                        <div className=\"inner\">Wiki</div>\n                    </a>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default RandomChar;","import { useState, useEffect, useRef } from 'react';\nimport PropTypes from 'prop-types';\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\n\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport useMarvelService from '../../services/MarvelService';\n\nimport './charList.min.css';\n\nconst CharList = (props) => {\n\n    const [charList, setCharList] = useState([]);\n    const [newItemLoading, setNewItemLoading] = useState(false);\n    const [offset, setOffset] = useState(603);\n    const [charEnded, setCharEnded] = useState(false);\n\n  \n    const {loading, error, getAllCharacters} = useMarvelService();\n\n    useEffect(() => {\n        onRequest(offset, true);\n    }, [])  \n\n    const onRequest = (offset, initial) => {\n        initial ? setNewItemLoading(false) : setNewItemLoading(true);\n        getAllCharacters(offset)\n            .then(onCharListLoaded)\n    }\n \n\n    const onCharListLoaded = (newCharList) => {\n        let ended = false;\n        if (newCharList.length < 9) {\n            ended = true;\n        }\n        \n        setCharList(charList => [...charList, ...newCharList]);\n        setNewItemLoading(newItemLoading => false);\n        setOffset(offset => offset + 9);\n        setCharEnded(charEnded => ended);\n    } \n   \n\n    const itemRefs = useRef([]);\n\n    const focusOnItem = (id) => {\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\n        itemRefs.current[id].classList.add('char__item_selected');\n        itemRefs.current[id].focus();\n    }\n\n\n    // Метод для оптимизации, чтобы не помещать такую конструкцию в метод render:\n    function renderItems(arr) {\n        const items = arr.map((item, i) => {\n           let imgStyle = {'objectFit' : 'cover'};\n           if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n                imgStyle = {'objectFit' : 'unset'};\n            }\n\n            return (\n                <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n                    <li \n                        className=\"char__item\"\n                        tabIndex={0}\n                        ref={el => itemRefs.current[i] = el}\n                        onClick={() => {\n                            props.onCharSelected(item.id);\n                            focusOnItem(i);\n                        }}\n                        onKeyPress={(e) => {\n                            if (e.key === ' ' || e.key === \"Enter\") {\n                                props.onCharSelected(item.id);\n                                focusOnItem(i);\n                            }\n                        }}>\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\n                        <div className=\"char__name\">{item.name}</div>\n                    </li>\n                </CSSTransition>\n            )\n        });\n        //Конструкция вынесена для центровки спиннера/ошибка:\n        return (\n            <ul className=\"char__grid\">\n                <TransitionGroup component={null}>\n                    {items}\n                </TransitionGroup>\n            </ul>    \n        )\n    }\n\n    const items = renderItems(charList);\n\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\n\n    return (\n        <div className=\"char__list\">\n            {errorMessage}\n            {spinner}\n            {items}\n            <button \n                className=\"button button__main button__long\"\n                disabled={newItemLoading}\n                style={{'display': charEnded ? 'none' : 'block'}}\n                onClick={() => onRequest(offset)}>\n                <div className=\"inner\">load more</div>\n            </button>\n        </div>\n    )\n    \n}\n\n// проверить onCharSelected на то, что это функция и на то, что он обязательный\n\nCharList.propTypes = {\n    onCharSelected: PropTypes.func.isRequired\n}\n\nexport default CharList;","import './skeleton.min.css';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\n\nimport useMarvelService from '../../services/MarvelService';\nimport Spinner from '../spinner/Spinner';\nimport ErrorMessage from '../errorMessage/ErrorMessage';\nimport Skeleton from '../skeleton/Skeleton';\n\nimport './charInfo.min.css';\n\nconst CharInfo = (props) => {\n\n    const [char, setChar] = useState(null);    \n \n    const {loading, error, getCharacter, clearError} =  useMarvelService();\n\n    useEffect(() => {\n        updateChar()\n    }, [props.charId])\n\n\n    const updateChar = () => {\n        const {charId} = props;\n        if (!charId) {\n            return;\n        }\n\n        clearError();\n        getCharacter(charId)\n            .then(onCharLoaded)    \n    }\n\n    const onCharLoaded = (char) => {\n        setChar(char);       \n    }\n\n   \n    const skeleton = char || loading || error ? null : <Skeleton/>\n    const errorMessage = error ? <ErrorMessage/> : null;\n    const spinner = loading ? <Spinner/> : null;\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\n\n    return (\n        <div className=\"char__info\">\n            {skeleton}\n            {errorMessage}\n            {spinner}\n            {content}\n        </div>\n    )\n    \n}\n\nconst View = ({char}) => {\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\n\n    let imgStyle = {'objectFit' : 'cover'};\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\n        imgStyle = {'objectFit' : 'contain'};\n    }\n\n    return (\n        <>\n            <div className=\"char__basics\">\n                <img src={thumbnail} alt={name} style={imgStyle}/>\n                <div>\n                    <div className=\"char__info-name\">{name}</div>\n                    <div className=\"char__btns\">\n                        <a href={homepage} className=\"button button__main\">\n                            <div className=\"inner\">homepage</div>\n                        </a>\n                        <a href={wiki} className=\"button button__secondary\">\n                            <div className=\"inner\">Wiki</div>\n                        </a>\n                    </div>\n                </div>\n            </div>\n            <div className=\"char__descr\">\n                {description}\n            </div>\n            <div className=\"char__comics\">Comics:</div>\n            <ul className=\"char__comics-list\">\n                {comics.length > 0 ? null : 'There are no comics with this character'}\n                {\n                    comics.map((item, i) => {\n                        return (\n                            <li key={i} className=\"char__comics-item\">\n                                {item.name}\n                            </li>\n                        )\n                    })\n                }               \n            </ul>\n        </>\n    )\n}\n\nCharInfo.propTypes = {\n    charId: PropTypes.number\n}\n\nexport default CharInfo;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n    state = {\r\n        error: false\r\n    }\r\n\r\n    componentDidCatch(error, errorInfo)  {\r\n        console.log(error, errorInfo);\r\n        this.setState({\r\n            error: true\r\n        })\r\n    }\r\n\r\n    render() {\r\n        if (this.state.error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;","import { useState } from \"react\";\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from \"formik\";\r\nimport * as Yup from 'yup';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport './charSearchForm.min.css';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage></ErrorMessage></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> :\r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>\r\n\r\n    return (\r\n         <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues={{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                    onSubmit = {({charName}) => {\r\n                        updateChar(charName);\r\n                    }}\r\n                >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field\r\n                            id='charName'\r\n                            name=\"charName\"\r\n                            type='text'\r\n                            placeholder=\"Enter name\"/>\r\n                        <button\r\n                            type='submit'\r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n         </div>   \r\n    )\r\n\r\n}\r\n\r\nexport default CharSearchForm;","import { useState } from \"react\";\r\n\r\nimport { Helmet } from \"react-helmet\";\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport ErrorBoundary from '../errorBoundary/ErrorBoundary';\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setChar] = useState(null);     \r\n\r\n    const onCharSelected = (id) => {\r\n        setChar(id);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n                <div className=\"char__content\">\r\n                    <ErrorBoundary>\r\n                        <CharList onCharSelected={onCharSelected}/>\r\n                    </ErrorBoundary>\r\n                    <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                    </div>\r\n                </div>\r\n                <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>    \r\n    )\r\n}\r\n\r\nexport default MainPage;","import {useHttp} from '../hooks/http.hook';\r\n\r\nconst useMarvelService = () => {\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=ab08ac1ac254a5b0e491709088dcd0c9';\r\n    const _baseOffset = 595;\r\n     \r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getCharacter = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (charPath) => {        \r\n        return {          \r\n            id: charPath.id,\r\n            name: charPath.name,\r\n            description: charPath.description ? `${charPath.description.slice(0, 210)}...` : 'Info about this character is not found',\r\n            thumbnail: charPath.thumbnail.path + '.' + charPath.thumbnail.extension,\r\n            homepage: charPath.urls[0].url,\r\n            wiki: charPath.urls[1].url,\r\n            comics: charPath.comics.items.slice(1, 11)                \r\n        }\r\n    }\r\n    \r\n    const _transformComics = (comics) => {\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            language: comics.textObjects.language || 'en-us',\r\n            price: comics.prices.price ? `${comics.prices.price}` : 'not available'\r\n        }\r\n    }\r\n\r\n    return {loading, error, getAllCharacters, getCharacterByName, getCharacter, clearError, getAllComics, getComic}\r\n\r\n}\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n        \r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n        } catch(e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}"],"names":["style","display","width","height","objectFit","margin","src","img","alt","View","char","name","description","thumbnail","homepage","wiki","imgStyle","className","href","useState","setChar","useMarvelService","loading","error","getCharacter","clearError","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","itemRefs","useRef","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","CSSTransition","timeout","classNames","tabIndex","ref","el","onCharSelected","onKeyPress","e","key","TransitionGroup","component","renderItems","disabled","comics","charId","skeleton","ErrorBoundary","state","errorInfo","console","log","this","setState","children","Component","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","selectedChar","Helmet","decoration","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","_baseOffset","res","_transformCharacter","getAllComics","_transformComics","getComic","charPath","slice","path","extension","urls","title","pageCount","language","textObjects","price","prices"],"sourceRoot":""}